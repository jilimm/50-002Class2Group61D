//****OVERALL STATE MACHINE OF THE GAME
//****MAIN STATE: STATE WHEN GAME IS IN PLAY
//****HALT STATE: STATE WHEN GAME IS OVER/ MAHCINE IS IDLE
module state (
    input clk,  // clock
    input rst,  // reset
    input leftBtn,
    input centBtn,
    input rightBtn,
    output row1,
    output row2,
    output row3,
    output row4,
    output row5,
    output row6,
    output row7,
    output row8,
    output row9,
    output row10,
    output gnd1,
    output gnd2,
    output gnd3,
    output totalScore[8], //totalScore of the player
    output rowresult[2], //display result after 1 round of propogation
    output startbutt, //press any button to start game
    output scoreDisplay[4][4], //display to the seven seg
    output buttonCounter[8], //counts number of button presses
    output buttonReg[8], //counts previous number of button press
    output highScoreOut[8] //outputs the 8 bit highScore
  ) {

  .clk(clk) {
    .rst(rst) {
       //start at halt state (also idle state). once the game is in play you are in main state
      fsm state(#INIT(HALT)) = {MAIN,HALT}; // MAIN = random + propagate + compare the button and the result, sumup = add to score, halt = pause game
      
      bcounter btnCounter; //button counter counts the number of button presses I make, this will help me start game on any button press. 
      reg8bit scoreSum; //use an 8bit register to store the toal score of the game 
      reg8bit btnReg; //stores previous value of button presses
      reg8bit addReg;
    }
    
    
  }
  main mainState;
  alu myalu;
  sig anybttnStart; //signal that there has been an any button press which would lead game to jump from halt state to main state
  sig highScore[8];
  bin_to_dec trans (#DIGITS(3),#LEADING_ZEROS(1)); //to help generate output on 7 seg LED
    

  always {
    buttonCounter = btnCounter.count; //number of button presses 
    buttonReg = btnReg.out; //number of button presses made before game went into halt state
   
     //instantiate signals and modules referenced
    startbutt=0;
    
    //setting up the registers they scoreSum stores the current score of the player playing the game
    //addReg is a register that prevents the sum from continually adding to itself in the MAIN state.  
    totalScore = scoreSum.out;
    scoreSum.data = 8b0; 
    scoreSum.en=0;
    //addReg acts as a buffer between scoreSum and the aluAdder
    //if there is no buffer, there would be cyclic circuit like scoreSum.data = scoreSum.out + rowresult
    //the cyclic circuit would result in the score Sum constantly adding upon itself until it becomes 111111;
    addReg.data = scoreSum.out; 
    addReg.en=0;
    //btnReg records number of button presses made before game went into halt state 
    btnReg.data = 8b0; 
    btnReg.en=0;  
    
    mainState.rst = rst;
    rowresult = mainState.result;
    
    //setting up inpts of main state and button press
    mainState.clk = clk;
    mainState.left2 = leftBtn;
    mainState.right0 = rightBtn;
    mainState.center1 = centBtn;
    
    //initialize high score
    highScore=8b0;
    highScoreOut = highScore;   //output highScore so we can diaply it on mojo and 7 seg led.
    
    //raw button input
    btnCounter.button = leftBtn;
    btnCounter.button2 = rightBtn;
    btnCounter.button3 = centBtn;
    
   
    //setting up alu
    myalu.a=0;
    myalu.b=0;
    myalu.alufn=0;
    
    //instantiating outputs of LED matrix
    row1=0; 
    row2=0;
    row3=0;
    row4=0;
    row5=0;
    row6=0;
    row7=0;
    row8=0;
    row9=0;
    row10=0;
    gnd1=1;
    gnd2=1;
    gnd3=1; //put ground to high to deactivate the columns

    //setting up my seven_seg output
    scoreDisplay[3] = 11;
    trans.value=highScore; //display high score on 7 seg LED by default
    scoreDisplay[2:0]=trans.digits; 
    
    //*******OUR FSM************//
    case (state.q){
    //MAIN STATE IS THE STATE YOU ARE IN ONCE YOU BEGIN THE GAME
      state.MAIN:
      //write enable to addReg so now addReg.out is your current score
      addReg.en=1; 
        
        //dont write enable your scoreSum register.  
       scoreSum.en=0;
        
        //dont count button press in main state
         btnCounter.button = 0;
         btnCounter.button2 = 0;
         btnCounter.button3 = 0;
        
        //dont write enable anything into button register
        btnReg.en=0; 
        
        
        //in the main state the LEDs are controlled by the main state (which references propogater and randomizer)
         gnd1 = mainState.low1;
         gnd2 = mainState.low2;
         gnd3 = mainState.low3;
    
         row1 = mainState.high1;
         row2 = mainState.high2;
         row3 = mainState.high3;
        row4=mainState.high4;
        row5=mainState.high5;
        row6=mainState.high6;
        row7=mainState.high7;
        row8=mainState.high8;
        row9=mainState.high9;
        row10=mainState.high10;
        
        //When you are at row 11 (finished propogation) and the score at the end of the propogation !=0 (>0) 
        if (mainState.result!=2b00 && mainState.rowOn==RowNumb.ROW11){ 
            //you have gained points now add them up to your current Score
             //******************************************************************//
        //************ALU IS USED HERE TO UPDATE CURRENT SCORE ****************
          //*************************************************************//
          
            myalu.alufn = Inst.ADD;
            myalu.a=mainState.result;
            myalu.b= addReg.out; //current score of user
            scoreSum.data = myalu.alu; 
           //write enable your scoreSum and write disable ur addReg, this prevents a cyclic circuit 
            scoreSum.en =1; //update my score 
            addReg.en=0; //dont write to addReg, prevent cyclic circuit 
          
          //update score on 7 seg LED
             trans.value=scoreSum.out;
            scoreDisplay[2:0]=trans.digits[2:0];
            scoreDisplay[3]=11;      
        } 
          
        else if (mainState.result==2b00 && mainState.rowOn==RowNumb.ROW11){
          //you missed the sequence or you entered it wrongly  
          state.d = state.HALT;
          }
        
 
        
        
      state.HALT:
      
        
      scoreSum.en=0; //dont write into my register
      addReg.en=0; //dont write into my addReg
      
        
      //since its game over, check and update the high score  
        
      if (highScore<scoreSum.out){
        //******************************************************************//
        //************ALU IS USED HERE TO UPDATE HIGH SCORE****************
          //*************************************************************//
            myalu.alufn = Inst.CMPLT;
            myalu.a = highScore;
            myalu.b = scoreSum.out;
          
          //current score is higher than the highScore, update
        if (myalu.alu[0]){
          highScore = scoreSum.out;
          }
        else{
            //high score remains the same
          }
        }
        
       //display the updated highScore on the 7seg
        trans.value=highScore;
            scoreDisplay[2:0]=trans.digits[2:0];
            scoreDisplay[3]=10; 

      
        //make sure there are no LED lighted up in matrix
         row1=0; 
      row2=0;
    row3=0;
    row4=0;
    row5=0;
    row6=0;
    row7=0;
    row8=0;
    row9=0;
    row10=0;
      gnd1=1;
      gnd2=1;
      gnd3=1;
        
         //count the (culmulative) button inputs made since transition to Halt State
         btnCounter.button = leftBtn;
         btnCounter.button2 = rightBtn;
          btnCounter.button3 = centBtn;
          btnReg.en = 0; //dont write enable bttn Reg. bttnReg currently outputs total number of button presses made before this transition to halt state
        
        //check for additional button presses made within the halt state 
        //if there are, this means that buttons were pressed during halt state
           if (btnReg.out < btnCounter.count){  
            anybttnStart=1; 
        }
           else {
            anybttnStart=0;
        }
        
        //return to main state if buttons are pressed in halt state
            if (anybttnStart==1) { 
           mainState.rst=1; //reset your main State the game restarts pn_gen an its seeds will restart. 
          
          //update btnReg to hold current number of button presses so I can use for comparison next time
            btnReg.data = btnCounter.count;
            btnReg.en=1; 
            
          //reset the score counter. current score shoul be 0 since you are entering a new game
           scoreSum.data=2b0;
           scoreSum.en=1;
          //go back to main state
          state.d = state.MAIN;
          }
        }
        
    }
}